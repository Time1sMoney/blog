---
import { Icon } from 'astro-icon/components';
import type { CollectionEntry } from 'astro:content';
import { render } from 'astro:content';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import MainLayout from './main.layout.astro';
dayjs.extend(relativeTime);
interface Props {
  post: CollectionEntry<'blog'>;
  posts: CollectionEntry<'blog'>[];
  slug?: string;
}
const { post, posts } = Astro.props;
const { title, pubDateTime, minutesRead, tags } = post.data;
const { Content } = await render(post);
const currentIndex = posts.findIndex((item) => item.id === post.id);
const previous = currentIndex !== 0 ? posts[currentIndex - 1].id : null;
const next =
  currentIndex !== posts.length - 1 ? posts[currentIndex + 1].id : null;
---

<MainLayout>
  <div class="py-4 space-y-4 w-full px-4">
    <div class="space-y-4">
      <div class="text-3xl font-semibold text-primary">
        {title}
      </div>
      <div class="flex gap-2 items-center">
        <Icon name="tabler:calendar" size="20" />
        <span> {dayjs(pubDateTime).format('YYYY-MM-DD')}</span>
      </div>
    </div>
    <article class="prose max-w-none mx-auto">
      <Content />
    </article>
    <div class="flex gap-4">
      {
        tags.map((tag) => (
          <span class="flex items-center gap-2 rounded py-1 px-2 underline underline-offset-4 text-sm hover:shadow-lg cursor-pointer">
            #{tag}
          </span>
        ))
      }
    </div>
    <div class="grid sm:grid-cols-2 grid-cols-1 gap-4 font-semibold">
      {
        previous && (
          <a
            href={`/posts/${previous}`}
            class={`col-span-1 rounded p-2 border-2 shadow-sm dark:border-slate-500 hover:text-primary hover:border-primary cursor-pointer ${
              !previous && 'pointer-events-none cursor-none'
            }`}
          >
            <div class="flex items-center gap-4">
              <Icon name="tabler:chevron-left" size="20" />
              <span>Prev</span>
            </div>
            <div class="text-ellipsis overflow-hidden whitespace-nowrap">
              {previous}
            </div>
          </a>
        )
      }
      {
        next && (
          <a
            href={`/posts/${next}`}
            class={`sm:col-start-2 p-2 rounded border-2 shadow-sm dark:border-slate-500 hover:text-primary hover:border-primary cursor-pointer ${
              !next && 'pointer-events-none cursor-none'
            }`}
          >
            <div class="flex justify-end items-center gap-4">
              <span>Next</span>
              <Icon name="tabler:chevron-right" size="20" />
            </div>
            <div class="text-ellipsis overflow-hidden whitespace-nowrap text-end">
              {next}
            </div>
          </a>
        )
      }
    </div>
  </div>
</MainLayout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement('div');
    progressContainer.className =
      'progress-container fixed top-0 z-10 h-1 w-full bg-background';

    // Create the progress bar div
    const progressBar = document.createElement('div');
    progressBar.className = 'progress-bar h-1 w-0 bg-primary';
    progressBar.id = 'myBar';

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.parentElement.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    document.addEventListener('scroll', () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById('myBar');
        if (myBar) {
          myBar.style.width = scrolled + '%';
        }
      }
    });
  }
  updateScrollProgress();

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    const headings = Array.from(
      document.querySelectorAll('h2, h3, h4, h5, h6')
    );
    for (const heading of headings) {
      heading.classList.add('group');
      const link = document.createElement('a');
      link.className =
        'heading-link ml-2 opacity-0 group-hover:opacity-100 focus:opacity-100';
      link.href = '#' + heading.id;

      const span = document.createElement('span');
      span.ariaHidden = 'true';
      span.innerText = '#';
      link.appendChild(span);
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const copyButtonLabel = 'Copy';
    const codeBlocks = Array.from(document.querySelectorAll('pre'));

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement('div');
      wrapper.style.position = 'relative';

      const copyButton = document.createElement('button');
      copyButton.className =
        'copy-code absolute right-3 -top-3 rounded bg-muted px-2 py-1 text-xs leading-4 text-foreground font-medium';
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute('tabindex', '0');
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener('click', async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector('code');
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? '');

      // visual feedback that task is completed
      button.innerText = 'Copied';

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /* Go to page start after page swap */
  document.addEventListener('astro:after-swap', () =>
    window.scrollTo({ left: 0, top: 0, behavior: 'instant' })
  );
</script>
